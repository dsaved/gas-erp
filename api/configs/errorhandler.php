<?php
if(DEVELOPER_MODE){
    error_reporting(E_ALL);
    ini_set('ignore_repeated_errors', TRUE);
    ini_set('display_errors', FALSE);
    ini_set('log_errors', TRUE);
    ini_set("error_log", "uploads/file/logs/ERROR-".(new DateTime)->format('Ymd').".log");
    set_error_handler("dsavedErrorHandler");
    register_shutdown_function( "dsavedFatalHandler" );
}else{
    error_reporting(0);
}
function getErrorType($errno){
    switch ($errno) {
        case 1:
            $type = "ERROR - Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted";
            break;
        case 2:
            $type = "WARNING - Run-time warnings (non-fatal errors). Execution of the script is not halted";
            break;
        case 4:
            $type = "PARSE - Compile-time parse errors. Parse errors should only be generated by the parser";
            break;
        case 8:
            $type = ">NOTICE - Run-time notices. The script found something that might be an error, but could also happen when running a script normally";
            break;
        case 16:
            $type = "CORE ERROR - Fatal errors at PHP startup. This is like ERROR, except it is generated by the core of PHP";
            break;
        case 32:
            $type = "CORE WARNING - Non-fatal errors at PHP startup. This is like WARNING, except it is generated by the core of PHP";
            break;
        case 64:
            $type = "COMPILE ERROR - Fatal compile-time errors. This is like ERROR, except it is generated by by the Zend Scripting Engine";
            break;
        case 128:
            $type = "COMPILE WARNING - Non-fatal compile-time errors. This is like WARNING, except it is generated by by the Zend Scripting Engine";
            break;
        case 256:
            $type = "USER ERROR - Fatal user-generated error. This is like ERROR, except it is generated in PHP code by using the PHP function trigger_error()";
            break;
        case 512:
            $type = "USER WARNING - Non-fatal user-generated warning. This is like WARNING, except it is generated in PHP code by using the PHP function trigger_error()";
            break;
        case 1024:
            $type = "USER NOTICE - User-generated notice. This is like NOTICE, except it is generated in PHP code by using the PHP function trigger_error()";
            break;
        case 2048:
            $type = "STRICT - Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4)";
            break;
        case 4096:
            $type = "RECOVERABLE ERROR - Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an ERROR (Since PHP 5.2)";
            break;
        case 8192:
            $type = "DEPRECATED - Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3)";
            break;
        case 16384:
            $type = "USER DEPRECATED- User-generated warning message. This is like DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3)";
            break;
        
        default:
            $type = "ALL WARNING & ERROR";
            break;
    }
    return $type;
}

function dsavedErrorHandler($errno, $errstr,$location,$line,$op) {
    $message = array();
    $type = getErrorType($errno);
    $message['title'] = 'ERROR';
    $message['type'] = $type;
    $message['code'] = $errno;
    $message['message'] = $errstr.' in '.$location.' on line: '.$line;
    $message['server'] = array();
    $message['server']['time'] = date("h:i:sa", $_SERVER['REQUEST_TIME']);
    $message['server']['name'] = $_SERVER['SERVER_NAME'];
    // $message['server']['port'] = $_SERVER['SERVER_PORT'];
    // $message['server']['software'] = $_SERVER['SERVER_SOFTWARE'];
    $message['server']['agent'] = $_SERVER['HTTP_USER_AGENT'];
    render_json($message);
    die();
}

function dsavedFatalHandler() {
    global $back_to_work;
    $errfile = "unknown file";
    $errstr  = "shutdown";
    $errno   = E_CORE_ERROR;
    $errline = 0;

    $error = error_get_last();
    if( $error !== NULL) {
        $errno   = $error["type"];
        $errfile = $error["file"];
        $errline = $error["line"];
        $errstr  = $error["message"];
        $type = getErrorType($errno);

        $message['title'] = 'FATAL ERROR';
        $message['type'] = $type;
        $message['code'] = $errno;
        $message['message'] = $errstr.' in '.$errfile.' on line: '.$errline;
        $message['server'] = array();
        $message['server']['time'] = date("h:i:sa", $_SERVER['REQUEST_TIME']);
        $message['server']['name'] = $_SERVER['SERVER_NAME'];
        // $message['server']['port'] = $_SERVER['SERVER_PORT'];
        // $message['server']['software'] = $_SERVER['SERVER_SOFTWARE'];
        $message['server']['agent'] = $_SERVER['HTTP_USER_AGENT'];
        render_json($message);
        die();
    }
}

function catch_sql_error($error) {
    global $back_to_work;
    if(DEVELOPER_MODE){
        $message['title'] = 'SQL ERROR';
        $message['message'] = $error;
        $message['server'] = array();
        $message['server']['time'] = date("h:i:sa", $_SERVER['REQUEST_TIME']);
        $message['server']['name'] = $_SERVER['SERVER_NAME'];
        // $message['server']['port'] = $_SERVER['SERVER_PORT'];
        // $message['server']['software'] = $_SERVER['SERVER_SOFTWARE'];
        $message['server']['agent'] = $_SERVER['HTTP_USER_AGENT'];
        render_json($message);
        die();
    }
}
?>